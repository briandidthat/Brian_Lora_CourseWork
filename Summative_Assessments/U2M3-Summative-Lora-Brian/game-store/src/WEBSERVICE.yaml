openapi: 3.0.0
info:
  title: Game Store
  description: A simple REST inventory management web service for a video game store.
  version: 0.0.1
servers:
  - url: http://localhost:8080/gamestore
    description: My local machine
paths:
  /games:
    get:
      summary: Retrieve a list of all available games.
      responses:
        '200':
          description: List of games.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
    post:
      summary: Add a new game to the current inventory.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
      responses:
        '201':
          description: Successful creation of game.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '401':
          description: Invalid request syntax.
        '422':
          description: Incomplete game information. Some required fields are missing.
  # get/put/delete games by ID
  /games/{gameId}:
    get:
      summary: Retrieve a certain game by the given ID.
      parameters:
        - name: gameId
          in: path
          required: true
          description: The ID of the game you'd like to retrieve.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Game object matching the given id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: The specified game ID is invalid (not a number).
        '404':
          description: A game with the specified ID was not found.
    put:
      summary: Update a specific game.
      parameters:
        - name: gameId
          in: path
          required: true
          description: The id of the game you'd like to update.
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
      responses:
        '201':
          description: Successful game update.
        '400':
          description: Invalid game format.
        '404':
          description: Game not found.
    delete:
      summary: Remove a certain game by the given ID.
      parameters:
        - name: gameId
          in: path
          required: true
          description: The ID of the game you'd like to remove.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '204':
          description: Successful game deletion.
        '404':
          description: A game with the specified ID was not found.
  # get games by studio
  /games/studio/{studio}:
    get:
      summary: Retrieve a game with the given studio.
      parameters:
        - name: studio
          in: path
          required: true
          description: The title of the game you'd like to retrieve.
          schema:
            type: string
            format: string
      responses:
        '200':
          description: List of games matching by the given studio.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: The specified game studio is invalid (not a string).
        '404':
          description: A game by the specified studio was not found.
  # get games by title
  /games/title/{title}:
    get:
      summary: Retrieve a game with the given title.
      parameters:
        - name: title
          in: path
          required: true
          description: The title of the game you'd like to retrieve.
          schema:
            type: string
            format: string
      responses:
        '200':
          description: Game object matching the given title.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: The specified game ID is invalid (not a number).
        '404':
          description: A game with the specified ID was not found.
  # get games by rating
  /games/rating/{rating}:
    get:
      summary: Retrieve a list of games by the given rating.
      parameters:
        - name: rating
          in: path
          required: true
          description: The rating of the games you'd like to retrieve.
          schema:
            type: string
            format: string
      responses:
        '200':
          description: List of game objects matching the given rating.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: The specified game rating is invalid (not a string).
        '404':
          description: A game with the specified rating was not found.
  # Console paths
  /consoles:
    get:
      summary: Retrieve a list of all available consoles.
      responses:
        '200':
          description: A list of all consoles in inventory.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Console'
    post:
      summary: Add a new console to the currenty inventory.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Console'
      responses:
        '201':
          description: Successful creation of console.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Console'
        '401':
          description: Invalid request syntax.
        '422':
          description: Incomplete console information. Some required fields are missing.
  # get/put/delete console by id
  /consoles/{consoleId}:
    get:
      summary: Retrieve a certain console by the given ID.
      parameters:
        - name: consoleId
          in: path
          required: true
          description: The ID of the console you'd like to retrieve.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Console object matching the given id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Console'
        '400':
          description: The specified console ID is invalid (not a number).
        '404':
          description: A game with the specified ID was not found.
    put:
      summary: Update a specific console.
      parameters:
        - name: consoleId
          in: path
          required: true
          description: The ID of the console you'd like to update.
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Console'
      responses:
        '201':
          description: Successful console update.
        '400':
          description: Invalid console format.
        '404':
          description: Console not found.
    delete:
      summary: Remove a certain console by the given ID.
      parameters:
        - name: consoleId
          in: path
          required: true
          description: The ID of the console you'd like to remove.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '204':
          description: Successful console deletion.
        '404':
          description: A console with the specified ID was not found.
  # Console by manufacturer
  /consoles/manufacturer/{manufacturer}:
    get:
      summary: Retrieve a list of consoles by the given manufacturer.
      parameters:
        - name: manufacturer
          in: path
          required: true
          description: The manufacturer of the consoles you'd like to retrieve.
          schema:
            type: string
            format: string
      responses:
        '200':
          description: Console list matching the given manufacturer.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Console'
        '400':
          description: The specified console manufacturer is invalid (not a string).
        '404':
          description: A game with the specified manufacturer was not found.
  # Tshirt paths
  /tshirts:
    get:
      summary: Retrieve a list of all available T-Shirts.
      responses:
        '200':
          description: A list of all t-shirts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TShirt'
    post:
      summary: Add a new t-shirt to the current inventory.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TShirt'
      responses:
        '201':
          description: Successful creation of t-shirt object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TShirt'
        '401':
          description: Invalid request syntax.
        '422':
          description: Incomplete t-shirt information. Some required fields are missing.
    put:
      summary: Update a specific t-shirt.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TShirt'
      responses:
        '201':
          description: Successful t-shirt update.
        '400':
          description: Invalid t-shirt format.
        '404':
          description: TShirt not found.
  # GET/DELETE T-Shirt by id
  /tshirts/{tShirtId}:
    get:
      summary: Retrieve a certain t-shirt by the given ID.
      parameters:
        - name: tShirtId
          in: path
          required: true
          description: The ID of the t-shirt you'd like to retrieve.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: T-Shirt object matching the given id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TShirt'
        '400':
          description: The specified t-shirt ID is invalid (not a number).
        '404':
          description: A t-shirt with the specified ID was not found.
    delete:
      summary: Remove a certain t-shirt by the given ID.
      parameters:
        - name: tShirtId
          in: path
          required: true
          description: The ID of the t-shirt you'd like to remove.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '204':
          description: Successful t-shirt deletion.
        '404':
          description: A t-shirt with the specified ID was not found.
  # T-Shirts by color
  /tshirts/scolor/{color}:
    get:
      summary: Retrieve a list of t-shirts by the given color.
      parameters:
        - name: color
          in: path
          required: true
          description: The color of the t-shirts you'd like to retrieve.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: List of T-Shirt objects matching the given color.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TShirt'
        '400':
          description: The specified t-shirt color is invalid (not a string).
        '404':
          description: A t-shirt with the specified color was not found.
  # T-Shirts by size
  /tshirts/size/{size}:
    get:
      summary: Retrieve a list of t-shirts by the given size.
      parameters:
        - name: size
          in: path
          required: true
          description: The size of the t-shirts you'd like to retrieve.
          schema:
            type: string
            format: string
      responses:
        '200':
          description: List of T-Shirt objects matching the given size.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TShirt'
        '400':
          description: The specified t-shirt size is invalid (not a string).
        '404':
          description: A t-shirt with the specified size was not found.
  # Invoice paths
  /invoices:
    post:
      summary: Create a new invoice based upon provided values.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
      responses:
        '201':
          description: Successful creation of invoice.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceViewModel'
        '401':
          description: Invalid request syntax.
        '422':
          description: Incomplete invoice information. Some required fields are missing.
  # get/delete invoice by id
  /invoices/{id}:
    get:
      summary: Retrieve an invoice by the given id.
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the invoice you'd like to retrieve.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Invoice object matching the given id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceViewModel'
        '400':
          description: The specified invoice id is invalid (not an integer).
        '404':
          description: An invoice with the given id was not found.
    delete:
      summary: Remove a certain invoice by the given ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the invoice you'd like to remove.
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '204':
          description: Successful invoice deletion.
        '404':
          description: An invoice with the specified ID was not found.
components:
  schemas:
    Game:
      properties:
        gameId:
          type: number
        title:
          type: string
        esrbRating:
          type: string
        description:
          type: string
        price:
          type: number
        studio:
          type: string
        quantity:
          type: number
      required:
        - title
        - esrbRating
        - description
        - price
        - studio
        - quantity
    Console:
      properties:
        consoleId:
          type: number
        model:
          type: string
        manufacturer:
          type: string
        memoryAmount:
          type: number
        processor:
          type: string
        price:
          type: number
        quantity:
          type: number
      required:
        - model
        - manufacturer
        - memoryAmount
        - processor
        - price
        - quantity
    TShirt:
      properties:
        tShirtId:
          type: number
        size:
          type: string
        color:
          type: string
        description:
          type: string
        price:
          type: number
        quantity:
          type: number
      required:
        - size
        - color
        - description
        - price
        - quantity
    Invoice:
      properties:
        invoiceId:
          type: number
        name:
          type: string
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zipCode:
          type: string
        itemType:
          type: string
        itemId:
          type: number
        unitPrice:
          type: number
        quanitity:
          type: number
        subTotal:
          type: number
        tax:
          type: number
        processingFee:
          type: number
        total:
          type: number
      required:
        - name
        - street
        - city
        - state
        - zipCode
        - itemType
        - itemId
        - unitPrice
        - quantity
    InvoiceViewModel:
      properties:
        id:
          type: number
        name:
          type: string
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zipCode:
          type: string
        itemType:
          type: string
        itemId:
          type: number
        unitPrice:
          type: number
        quanitity:
          type: number
        subTotal:
          type: number
        tax:
          type: number
        processingFee:
          type: number
        total:
          type: number